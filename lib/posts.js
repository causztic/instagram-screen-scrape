// Generated by CoffeeScript 1.12.5
var InstagramPosts, Readable, getPosts, jsonRequest,
bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
hasProp = {}.hasOwnProperty;

Readable = require('readable-stream/readable');

jsonRequest = require('./util').jsonRequest;


/**
* Make a request for a Instagram page, parse the response, and get all the
 posts.
* @param {String} username
* @param {String} [startingId] The maximum post id query for (the lowest one
 from the last request), or undefined if this is the first request.
* @return {Stream} A stream of posts
*/

getPosts = function(username, startingId) {
return jsonRequest('user.*.nodes', {
  uri: "https://instagram.com/" + username + "/?__a=1",
  qs: {
    'max_id': startingId
  }
});
};


/**
* Stream that scrapes as many posts as possible for a given user.
* @param {String} options.username
* @return {Stream} A stream of post objects.
*/

InstagramPosts = (function(superClass) {
extend(InstagramPosts, superClass);

InstagramPosts.prototype._lock = false;

InstagramPosts.prototype._minPostId = void 0;

function InstagramPosts(arg) {
  this.username = arg.username;
  this.destroy = bind(this.destroy, this);
  this._read = bind(this._read, this);
  InstagramPosts.__super__.constructor.call(this, {
    highWaterMark: 16,
    objectMode: true
  });
  this._readableState.destroyed = false;
}

InstagramPosts.prototype._read = function() {
  var hasMorePosts, lastPost;
  if (this._lock) {
    return;
  }
  this._lock = true;
  if (this._readableState.destroyed) {
    this.push(null);
    return;
  }
  hasMorePosts = false;
  lastPost = void 0;
  return getPosts(this.username, this._minPostId).on('error', (function(_this) {
    return function(err) {
      return _this.emit('error', err);
    };
  })(this)).on('header', function (data) {
    // console.log('header:', data);
  }).on('data', (function(_this) {
    return function(rawPost) {
      rawPost.forEach(function(post){
        var media, p;
        hasMorePosts = true;
        p = {
          id: post.id,
          username: _this.username,
          time: +post['date'],
          type: post.__typename,
          likes: post.likes.count,
          comments: post.comments.count,
          media: [post.display_src]
        };
        if (post.caption != null) {
          p.text = post.caption;
        }
        _this.push(p);
      })
    }  
  })(this));
};

InstagramPosts.prototype.destroy = function() {
  if (this._readableState.destroyed) {
    return;
  }
  this._readableState.destroyed = true;
  return this._destroy((function(_this) {
    return function(err) {
      if (err) {
        _this.emit('error', err);
      }
      return _this.emit('close');
    };
  })(this));
};

InstagramPosts.prototype._destroy = function(cb) {
  return process.nextTick(cb);
};

return InstagramPosts;

})(Readable);

module.exports = InstagramPosts;
